
def archive() {
    def changes=false
    def equals = sh( 
        
    script: '''
     #!/bin/bash 

     DIFF=$(diff -r modules/ artifacts/modules/ | tail -1)
     if [ "$DIFF" != "" ]; then
     echo "Not same"
     else
     echo "Same"
     fi

     ''', returnStdout: true).trim()

    if(equals == "Same"){
         println("Same as old artifact.")
    }else{
         println("Some files are updated.") 
         changes=true        
    }

    return changes
}


pipeline {
    agent any 
    environment{
	     GIT_CREDS = credentials('GIT_TOKEN')
    }
    stages {
         stage("gather data"){
             steps{    
                  sh "python3 ./scrape.py"
                  sh "python3 ./frontmatter.py"
               }
           }
         stage('Check Data') {
            when {
                expression { currentBuild.previousBuild }
            }
            steps {
                sh "mkdir -p artifacts"
                    script{
                    try{
                        copyArtifacts(projectName: currentBuild.projectName,
                           target: "artifacts",
                           selector: lastSuccessful())
                           def value = archive()
                           if(value == true){
                              println("Archiving new meta-data...")
                              archiveArtifacts artifacts: 'modules/**/*.*', fingerprint: true
                              sh "bash ./loadModules.sh"
                           }else{
                              println("None of the required files were updated.Archiving meta-data...")
                              archiveArtifacts artifacts: 'modules/**/*.*', fingerprint: true
                           }       
                    } catch(err) {
                        println("$err")
                        archiveArtifacts artifacts: 'modules/**/*.*', fingerprint: true
                        sh "bash ./loadModules.sh"
                   }
                }
                  
                }
            }
          stage("clean workspace"){
              steps{
                  cleanWs()
              }
          }
    }    
}