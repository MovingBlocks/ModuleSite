
def archive() {
     def changes=false
    def equals = sh '''
     #!/bin/bash 

     DIFF=$(diff -r modules/ artifacts/modules/ | tail -1)
     if [ "$DIFF" != "" ]; then
     echo "not same"
     else
     echo "same"
     fi

     '''

    if(equals == ""){
         println("same as old artifact.")
    }else{
           println("some files are updated.") 
           changes=true        
    }

    return changes
}


pipeline {
    agent any 
    environment{
	     GIT_CREDS = credentials('GIT_TOKEN')
    }
    stages {
         stage("gather data"){
             steps{    
                  sh "python3 ./scrape.py"
                  sh "python3 ./frontmatter.py"
               }
           }

         stage('Check Data') {
            when {
                expression { currentBuild.previousBuild }
            }
            steps {
                sh "mkdir -p artifacts"
              
                    script{
                    try{
                        copyArtifacts(projectName: currentBuild.projectName,
                            target: "artifacts",
                            selector: lastSuccessful())

                          def value = archive()
                           if(value == true){
                              println("Archiving new meta-data...")
                              archiveArtifacts artifacts: 'modules/**/*.*', fingerprint: true
                               sh "bash ./loadModules.sh"
                               sh '''
                               #!/bin/bash 

                               cd ./module-site/ModuleSite
                               git config --global user.email "exapmle@gmail.com"
                               git config --global user.name "userName" 
                               git checkout -b module_gen
                               git add . 
                               git commit -m "add: all modules "
                               git push https://${GIT_CREDS}@github.com/MovingBlocks/ModuleSite.git  module_gen -f
                               curl -i -H "Authorization: token $GIT_CREDS" -X POST "https://api.github.com/repos/MovingBlocks/ModuleSite/pulls"  -d '{ "title": "Module generated by automation",
                                      "base": "master",
                                      "head": "module_gen",
                                      "body": "Module generated using Jenkins pipeline"}'

                                '''
                           }else{
                                println("None of the required files were updated. Skipping archiving meta-data...")
                                archiveArtifacts artifacts: 'modules/**/*.*', fingerprint: true
                           }
                          
                    } catch(err) {
                        println("$err")
                        archiveArtifacts artifacts: 'modules/**/*.*', fingerprint: true
                        sh "bash ./loadModules.sh"
                        sh '''
                               #!/bin/bash

                               cd ./module-site/ModuleSite
                               git config --global user.email "exapmle@gmail.com"
                               git config --global user.name "userName" 
                               git checkout -b module_gen
                               git add . 
                               git commit -m "add: all modules "
                               git push https://${GIT_CREDS}@github.com/MovingBlocks/ModuleSite.git  module_gen -f
                               curl -i -H "Authorization: token $GIT_CREDS" -X POST "https://api.github.com/repos/MovingBlocks/ModuleSite/pulls"  -d '{ "title": "Module generated by automation",
                                      "base": "master",
                                      "head": "module_gen",
                                      "body": "Module generated using Jenkins pipeline"}'
                                '''
                   }
                }
                  
                }
            }
          
          stage("clean workspace"){
              steps{
                  cleanWs()
              }
          }

    }    
}